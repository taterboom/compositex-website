{"id":"2b02c84d-3fc8-49da-bc6c-1845a04c2ade","nodes":[{"id":"a085a52f-63d0-43ec-b2fb-7c1ba37a4a61","metaId":"221a92a0-683a-4453-a420-a323544a2bb1","name":"Tinypng File","metaNode":{"_raw":"(function () {\n  /** @type {CompositeX.MetaNodeConfig} */\n  const nodeConfig = {\n    config: {\n      name: \"Tinypng File\",\n      desc: \"Compress uploaded file via Tinypng\",\n      input: { type: \"file\" },\n      output: { type: \"any\" },\n      options: [{ name: \"apiKey\", type: \"string\", desc: \"get your api key in https://tinypng.com/developers\" }],\n    },\n    run(input, options, context) {\n      return fetch(\"https://api.tinify.com/shrink\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Basic ${window.btoa(`api:${options.apiKey}`)}`,\n          },\n          body: input,\n        })\n        .then((res) => res.json())\n    },\n  }\n  return nodeConfig\n})()","id":"221a92a0-683a-4453-a420-a323544a2bb1","config":{"name":"Tinypng File","desc":"Compress uploaded file via Tinypng","input":{"type":"file"},"output":{"type":"any"},"options":[{"name":"apiKey","type":"string","desc":"get your api key in https://tinypng.com/developers"}]}}},{"id":"8f392e67-5ae0-464c-83e7-2e98a98d6032","metaId":"lodashGet","name":"LodashGet","options":{"path":"output.url"},"metaNode":{"_raw":"(function () {\n    const lodashGet = (function () {\n      var FUNC_ERROR_TEXT = \"Expected a function\",\n        HASH_UNDEFINED = \"__lodash_hash_undefined__\",\n        INFINITY = 1 / 0,\n        funcTag = \"[object Function]\",\n        genTag = \"[object GeneratorFunction]\",\n        symbolTag = \"[object Symbol]\",\n        reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n        reIsPlainProp = /^\\w*$/,\n        reLeadingDot = /^\\./,\n        rePropName =\n          /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n        reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n        reEscapeChar = /\\\\(\\\\)?/g,\n        reIsHostCtor = /^\\[object .+?Constructor\\]$/,\n        freeGlobal = \"object\" == typeof global && global && global.Object === Object && global,\n        freeSelf = \"object\" == typeof self && self && self.Object === Object && self,\n        root = freeGlobal || freeSelf || Function(\"return this\")()\n      function getValue(t, e) {\n        return null == t ? void 0 : t[e]\n      }\n      function isHostObject(t) {\n        var e = !1\n        if (null != t && \"function\" != typeof t.toString)\n          try {\n            e = !!(t + \"\")\n          } catch (t) {}\n        return e\n      }\n      var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype,\n        coreJsData = root[\"__core-js_shared__\"],\n        maskSrcKey = (function () {\n          var t = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || \"\")\n          return t ? \"Symbol(src)_1.\" + t : \"\"\n        })(),\n        funcToString = funcProto.toString,\n        hasOwnProperty = objectProto.hasOwnProperty,\n        objectToString = objectProto.toString,\n        reIsNative = RegExp(\n          \"^\" +\n            funcToString\n              .call(hasOwnProperty)\n              .replace(reRegExpChar, \"\\\\$&\")\n              .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") +\n            \"$\"\n        ),\n        Symbol = root.Symbol,\n        splice = arrayProto.splice,\n        Map = getNative(root, \"Map\"),\n        nativeCreate = getNative(Object, \"create\"),\n        symbolProto = Symbol ? Symbol.prototype : void 0,\n        symbolToString = symbolProto ? symbolProto.toString : void 0\n      function Hash(t) {\n        var e = -1,\n          r = t ? t.length : 0\n        for (this.clear(); ++e < r; ) {\n          var a = t[e]\n          this.set(a[0], a[1])\n        }\n      }\n      function hashClear() {\n        this.__data__ = nativeCreate ? nativeCreate(null) : {}\n      }\n      function hashDelete(t) {\n        return this.has(t) && delete this.__data__[t]\n      }\n      function hashGet(t) {\n        var e = this.__data__\n        if (nativeCreate) {\n          var r = e[t]\n          return r === HASH_UNDEFINED ? void 0 : r\n        }\n        return hasOwnProperty.call(e, t) ? e[t] : void 0\n      }\n      function hashHas(t) {\n        var e = this.__data__\n        return nativeCreate ? void 0 !== e[t] : hasOwnProperty.call(e, t)\n      }\n      function hashSet(t, e) {\n        return (this.__data__[t] = nativeCreate && void 0 === e ? HASH_UNDEFINED : e), this\n      }\n      function ListCache(t) {\n        var e = -1,\n          r = t ? t.length : 0\n        for (this.clear(); ++e < r; ) {\n          var a = t[e]\n          this.set(a[0], a[1])\n        }\n      }\n      function listCacheClear() {\n        this.__data__ = []\n      }\n      function listCacheDelete(t) {\n        var e = this.__data__,\n          r = assocIndexOf(e, t)\n        return !(r < 0) && (r == e.length - 1 ? e.pop() : splice.call(e, r, 1), !0)\n      }\n      function listCacheGet(t) {\n        var e = this.__data__,\n          r = assocIndexOf(e, t)\n        return r < 0 ? void 0 : e[r][1]\n      }\n      function listCacheHas(t) {\n        return -1 < assocIndexOf(this.__data__, t)\n      }\n      function listCacheSet(t, e) {\n        var r = this.__data__,\n          a = assocIndexOf(r, t)\n        return a < 0 ? r.push([t, e]) : (r[a][1] = e), this\n      }\n      function MapCache(t) {\n        var e = -1,\n          r = t ? t.length : 0\n        for (this.clear(); ++e < r; ) {\n          var a = t[e]\n          this.set(a[0], a[1])\n        }\n      }\n      function mapCacheClear() {\n        this.__data__ = { hash: new Hash(), map: new (Map || ListCache)(), string: new Hash() }\n      }\n      function mapCacheDelete(t) {\n        return getMapData(this, t).delete(t)\n      }\n      function mapCacheGet(t) {\n        return getMapData(this, t).get(t)\n      }\n      function mapCacheHas(t) {\n        return getMapData(this, t).has(t)\n      }\n      function mapCacheSet(t, e) {\n        return getMapData(this, t).set(t, e), this\n      }\n      function assocIndexOf(t, e) {\n        for (var r = t.length; r--; ) if (eq(t[r][0], e)) return r\n        return -1\n      }\n      function baseGet(t, e) {\n        for (var r = 0, a = (e = isKey(e, t) ? [e] : castPath(e)).length; null != t && r < a; )\n          t = t[toKey(e[r++])]\n        return r && r == a ? t : void 0\n      }\n      function baseIsNative(t) {\n        return (\n          !(!isObject(t) || isMasked(t)) &&\n          (isFunction(t) || isHostObject(t) ? reIsNative : reIsHostCtor).test(toSource(t))\n        )\n      }\n      function baseToString(t) {\n        if (\"string\" == typeof t) return t\n        if (isSymbol(t)) return symbolToString ? symbolToString.call(t) : \"\"\n        var e = t + \"\"\n        return \"0\" == e && 1 / t == -INFINITY ? \"-0\" : e\n      }\n      function castPath(t) {\n        return isArray(t) ? t : stringToPath(t)\n      }\n      function getMapData(t, e) {\n        var r = t.__data__\n        return isKeyable(e) ? r[\"string\" == typeof e ? \"string\" : \"hash\"] : r.map\n      }\n      function getNative(t, e) {\n        var r = getValue(t, e)\n        return baseIsNative(r) ? r : void 0\n      }\n      function isKey(t, e) {\n        if (isArray(t)) return !1\n        var r = typeof t\n        return (\n          !(\"number\" != r && \"symbol\" != r && \"boolean\" != r && null != t && !isSymbol(t)) ||\n          reIsPlainProp.test(t) ||\n          !reIsDeepProp.test(t) ||\n          (null != e && t in Object(e))\n        )\n      }\n      function isKeyable(t) {\n        var e = typeof t\n        return \"string\" == e || \"number\" == e || \"symbol\" == e || \"boolean\" == e\n          ? \"__proto__\" !== t\n          : null === t\n      }\n      function isMasked(t) {\n        return !!maskSrcKey && maskSrcKey in t\n      }\n      ;(Hash.prototype.clear = hashClear),\n        (Hash.prototype.delete = hashDelete),\n        (Hash.prototype.get = hashGet),\n        (Hash.prototype.has = hashHas),\n        (Hash.prototype.set = hashSet),\n        (ListCache.prototype.clear = listCacheClear),\n        (ListCache.prototype.delete = listCacheDelete),\n        (ListCache.prototype.get = listCacheGet),\n        (ListCache.prototype.has = listCacheHas),\n        (ListCache.prototype.set = listCacheSet),\n        (MapCache.prototype.clear = mapCacheClear),\n        (MapCache.prototype.delete = mapCacheDelete),\n        (MapCache.prototype.get = mapCacheGet),\n        (MapCache.prototype.has = mapCacheHas),\n        (MapCache.prototype.set = mapCacheSet)\n      var stringToPath = memoize(function (t) {\n        t = toString(t)\n        var o = []\n        return (\n          reLeadingDot.test(t) && o.push(\"\"),\n          t.replace(rePropName, function (t, e, r, a) {\n            o.push(r ? a.replace(reEscapeChar, \"$1\") : e || t)\n          }),\n          o\n        )\n      })\n      function toKey(t) {\n        if (\"string\" == typeof t || isSymbol(t)) return t\n        var e = t + \"\"\n        return \"0\" == e && 1 / t == -INFINITY ? \"-0\" : e\n      }\n      function toSource(t) {\n        if (null != t) {\n          try {\n            return funcToString.call(t)\n          } catch (t) {}\n          try {\n            return t + \"\"\n          } catch (t) {}\n        }\n        return \"\"\n      }\n      function memoize(o, n) {\n        if (\"function\" != typeof o || (n && \"function\" != typeof n))\n          throw new TypeError(FUNC_ERROR_TEXT)\n        var i = function () {\n          var t = arguments,\n            e = n ? n.apply(this, t) : t[0],\n            r = i.cache\n          if (r.has(e)) return r.get(e)\n          var a = o.apply(this, t)\n          return (i.cache = r.set(e, a)), a\n        }\n        return (i.cache = new (memoize.Cache || MapCache)()), i\n      }\n      function eq(t, e) {\n        return t === e || (t != t && e != e)\n      }\n      memoize.Cache = MapCache\n      var isArray = Array.isArray\n      function isFunction(t) {\n        var e = isObject(t) ? objectToString.call(t) : \"\"\n        return e == funcTag || e == genTag\n      }\n      function isObject(t) {\n        var e = typeof t\n        return !!t && (\"object\" == e || \"function\" == e)\n      }\n      function isObjectLike(t) {\n        return !!t && \"object\" == typeof t\n      }\n      function isSymbol(t) {\n        return \"symbol\" == typeof t || (isObjectLike(t) && objectToString.call(t) == symbolTag)\n      }\n      function toString(t) {\n        return null == t ? \"\" : baseToString(t)\n      }\n      function get(t, e, r) {\n        var a = null == t ? void 0 : baseGet(t, e)\n        return void 0 === a ? r : a\n      }\n      return get\n    })()\n    /** @type {CompositeX.MetaNodeConfig} */\n    const nodeConfig = {\n      config: {\n        name: \"LodashGet\",\n        desc: \"Get element from an object via lodash.get\",\n        input: { type: \"any\" },\n        output: { type: \"any\" },\n        options: [{ name: \"path\", type: \"string\" }],\n      },\n      run(input, options, context) {\n        return lodashGet(input, options.path)\n      },\n    }\n    return nodeConfig\n  })()","id":"lodashGet","config":{"name":"LodashGet","desc":"Get element from an object via lodash.get","input":{"type":"any"},"output":{"type":"any"},"options":[{"name":"path","type":"string"}]}}}],"name":"Tinypng Compress Image File","desc":"Compress img via Tinypng API"}