{"_raw":"(function () {\n  /** @type {CompositeX.MetaNodeConfig} */\n  const nodeConfig = {\n    config: {\n      name: \"ZeplinImg\",\n      desc: \"Get Zeplin high precision img\",\n      input: { type: \"string\" },\n      output: { type: \"string\" },\n      options: [\n        { name: \"format\", type: \"string\", default: \"png\" },\n        { name: \"densityScale\", type: \"number\", default: 3 },\n      ],\n    },\n    run(input, options, context) {\n      return (async function (existUrl, format, densityScale) {\n        const mainWorldPath = await context.mainWorld(\"location.pathname\")\n        const path = mainWorldPath.replace(\"project\", \"projects\").replace(\"screen\", \"screens\")\n        const mainWorldLayersCache = await context.mainWorld(\"window.__layers_cache__\")\n        const layerFromCache = mainWorldLayersCache?.find?.((item) =>\n          item.contents.some((content) => content.url === existUrl)\n        )\n        let layer = layerFromCache\n        if (!layer) {\n          const apiPrefix = \"https://api.zeplin.io/v2\"\n          const mainWorldCookie = await context.mainWorld(\"document.cookie\")\n          const token = mainWorldCookie\n            .split(\";\")\n            .find((item) => item.trim().startsWith(\"userToken=\"))\n            .split(\"userToken=\")[1]\n          const versionsRes = await context\n            .fetch(`${apiPrefix}${path}/versions`, { headers: { \"zeplin-token\": token } })\n            .then((res) => res.json())\n          const versionId = versionsRes.versions[0]._id\n          const assetsUrlRes = await context\n            .fetch(`${apiPrefix}${path}/versions/${versionId}/assets`, {\n              headers: { \"zeplin-token\": token },\n            })\n            .then((res) => res.json())\n          const asstesUrl = assetsUrlRes.url\n          const layers = await context.fetch(asstesUrl).then((res) => res.json())\n          context.mainWorld(\"window.__layers_cache__=\" + JSON.stringify(layers))\n          layer = layers.find((item) => item.contents.some((content) => content.url === existUrl))\n        }\n        if (!layer) throw new Error(\"cannot found layer\")\n        return layer.contents.find(\n          (item) => item.format === format && item.densityScale === densityScale\n        )\n      })(input, options.format, options.densityScale)\n    },\n  }\n  return nodeConfig\n})()","id":"f22ee570-0847-4af8-95d5-1aeac974cd17","config":{"name":"ZeplinImg","desc":"Get Zeplin high precision img","input":{"type":"string"},"output":{"type":"string"},"options":[{"name":"format","type":"string","default":"png"},{"name":"densityScale","type":"number","default":3}]}}